import streamlit as st
import pandas as pd
import geopandas as gpd
import plotly.express as px
import os

from utils.loaders import load_data
from utils.metrics import format_number

# ------------------------------
# Configura√ß√µes iniciais
# ------------------------------
st.set_page_config(
    page_title="Programa de Seguran√ßa H√≠drica",
    page_icon="üíß",
    layout="wide"
)

# ------------------------------
# Logos (com fallback caso n√£o existam)
# ------------------------------
col1, col2, col3 = st.columns([6, 1, 1])

logo_idr = "assets/idr_logo.png"
logo_pr = "assets/governo_pr.png"

with col2:
    if os.path.exists(logo_idr):
        st.image(logo_idr, use_container_width=True)
    else:
        st.write("IDR-Paran√°")

with col3:
    if os.path.exists(logo_pr):
        st.image(logo_pr, use_container_width=True)
    else:
        st.write("Governo PR")

# ------------------------------
# T√≠tulo principal
# ------------------------------
st.title("üíß Programa de Seguran√ßa H√≠drica ‚Äì Painel Interativo de Diagn√≥stico Territorial")

# ------------------------------
# Carregamento de dados
# ------------------------------
try:
    df_conf = load_data("data/conflitou_uso.xlsx")
    df_ottos = load_data("data/ottos_selec.xlsx")
except Exception as e:
    st.warning(f"Erro ao carregar dados: {e}")
    df_conf, df_ottos = pd.DataFrame(), pd.DataFrame()

# Se shapefile existir, carrega
gdf_estradas = None
shp_path = "data/estradas_otto/estradas_otto.shp"
if os.path.exists(shp_path):
    try:
        gdf_estradas = gpd.read_file(shp_path)
    except Exception as e:
        st.warning(f"Erro ao carregar shapefile: {e}")

# ------------------------------
# Filtros globais
# ------------------------------
st.sidebar.header("Filtros")

if not df_ottos.empty:
    bacias = st.sidebar.multiselect("Selecionar Bacias (CJ)", sorted(df_ottos["CJ"].unique()))
    ottos = st.sidebar.multiselect("Selecionar Ottobacias (ID)", sorted(df_ottos["ID"].unique()))
    municipios = st.sidebar.multiselect("Selecionar Munic√≠pios", sorted(df_ottos["Municipio"].unique()))

    if bacias:
        df_conf = df_conf[df_conf["CJ"].isin(bacias)]
    if ottos:
        df_conf = df_conf[df_conf["ID"].isin(ottos)]
    if municipios:
        df_conf = df_conf[df_conf["Municipio"].isin(municipios)]

# ------------------------------
# KPIs principais
# ------------------------------
st.subheader("üìä Indicadores Principais")

if not df_conf.empty:
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Bacias", format_number(df_conf["CJ"].nunique()))
    col2.metric("Ottobacias", format_number(df_conf["ID"].nunique()))
    if "area_conflito" in df_conf.columns:
        col3.metric("√Årea Conflito APP (ha)", format_number(df_conf["area_conflito"].sum()))
    if "num_imoveis" in df_conf.columns:
        col4.metric("N√∫mero de Im√≥veis", format_number(df_conf["num_imoveis"].sum()))
else:
    st.info("Nenhum dado carregado. Verifique os arquivos em `data/`.")

# ------------------------------
# Abas principais
# ------------------------------
abas = st.tabs([
    "Vis√£o Geral",
    "Meio F√≠sico",
    "Socioecon√¥mico",
    "Outorgas / Hidrologia",
    "Uso do Solo / Conflitos",
    "CAR / Im√≥veis",
    "Pecu√°ria",
    "Receitu√°rios"
])

# ------------------------------
# Conte√∫do das abas
# ------------------------------
with abas[0]:
    st.write("### üåç Vis√£o Geral")
    if not df_conf.empty and {"Latitude", "Longitude"}.issubset(df_conf.columns):
        st.map(df_conf[["Latitude", "Longitude"]].dropna())
    else:
        st.write("Mapa n√£o dispon√≠vel ‚Äì colunas `Latitude` e `Longitude` ausentes.")

with abas[1]:
    st.write("### ‚õ∞Ô∏è Meio F√≠sico")
    st.write("Placeholder para gr√°ficos de altitude, declividade e solos.")

with abas[2]:
    st.write("### üë®‚Äçüë©‚Äçüëß Socioecon√¥mico")
    st.write("Placeholder para idade, sexo, escolaridade e renda.")

with abas[3]:
    st.write("### üí¶ Outorgas / Hidrologia")
    st.write("Placeholder para nascentes, outorgas e vaz√µes.")

with abas[4]:
    st.write("### üå± Uso do Solo / Conflitos")
    if not df_conf.empty and "area_conflito" in df_conf.columns:
        fig = px.bar(df_conf, x="Municipio", y="area_conflito", title="√Årea de Conflito por Munic√≠pio")
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.write("Dados de conflito de uso n√£o dispon√≠veis.")

with abas[5]:
    st.write("### üè† CAR / Im√≥veis")
    st.write("Placeholder para m√≥dulos rurais, √°rea m√©dia de im√≥veis...")

with abas[6]:
    st.write("### üêÑ Pecu√°ria")
    st.write("Placeholder para bovinos, su√≠nos, aves...")

with abas[7]:
    st.write("### üß™ Receitu√°rios / Insumos")
    if not df_conf.empty and {"grupo_insumo", "quantidade"}.issubset(df_conf.columns):
        fig = px.bar(df_conf, x="grupo_insumo", y="quantidade", title="Quantidade por Grupo de Insumo")
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.write("Dados de insumos n√£o dispon√≠veis.")
